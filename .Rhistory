{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
result<-mergeTree()(distance)(result[[1]],result[[2]])
return(result)
}
}
}
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:10000,])
mergeTree<-function()
{
function(distance)
{
function(tree1,tree2)
{
head1<-head(tree1,n=1)
head2<-head(tree2,n=1)
tail1<-tail(tree1,n=1)
tail2<-tail(tree2,n=1)
distance1<-distance(head1,head2)
distance2<-distance(head1,tail2)
distance3<-distance(head2,tail1)
#print(as.list(environment()))
if(min(distance1,distance2,distance3)==distance1)
result<-rbind(rev(tree1),tree2)
if(min(distance1,distance2,distance3)==distance2)
result<-rbind(tree2,tree1)
if(min(distance1,distance2,distance3)==distance3)
result<-rbind(tree1,tree2)
return(result)
}
}
}
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:10000,])
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:240,])
plot(result[,c('x','y')],type='l')
mergeTree<-function()
{
function(distance)
{
function(tree1,tree2)
{
head1<-head(tree1,n=1)
head2<-head(tree2,n=1)
tail1<-tail(tree1,n=1)
tail2<-tail(tree2,n=1)
distance1<-distance(head1,head2)
distance2<-distance(head1,tail2)
distance3<-distance(head2,tail1)
print(as.list(environment()))
if(min(distance1,distance2,distance3)==distance1)
result<-rbind(rev(tree1),tree2)
if(min(distance1,distance2,distance3)==distance2)
result<-rbind(tree2,tree1)
if(min(distance1,distance2,distance3)==distance3)
result<-rbind(tree1,tree2)
return(result)
}
}
}
plot(result[,c('x','y')],type='l')
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:240,])
mergeTree<-function()
{
function(distance)
{
function(tree1,tree2)
{
head1<-head(tree1,n=1)
head2<-head(tree2,n=1)
tail1<-tail(tree1,n=1)
tail2<-tail(tree2,n=1)
distance1<-distance(head1,head2)
distance2<-distance(head1,tail2)
distance3<-distance(head2,tail1)
#print(as.list(environment()))
if(min(distance1,distance2,distance3)==distance1)
result<-rbind(rev(tree1),tree2)
if(min(distance1,distance2,distance3)==distance2)
result<-rbind(tree2,tree1)
if(min(distance1,distance2,distance3)==distance3)
result<-rbind(tree1,tree2)
return(result)
}
}
}
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:2400,])
plot(result[,c('x','y')],type='l')
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:240,])
plot(result[,c('x','y')],type='l')
result<-binarySort(threshold=120)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[santa$x<5000,])
plot(result[,c('x','y')],type='l')
result<-binarySort(threshold=80)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:75000,])
plot(result[,c('x','y')],type='l')
neighborDistances()
neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)>500))
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)>500)
splitRecurse<-function(threshold)
{
function(distance)
{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
#result<-mergeTree()(distance)(result[[1]],result[[2]])
result<-rbind(result[[1]],result[[2]])
return(result)
}
}
}
result2<-binarySort(threshold=80)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:75000,])
plot(result[,c('x','y')],type='l')
plot(result2[,c('x','y')],type='l')
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result2)>500)
splitRecurse<-function(threshold)
{
function(distance)
{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
#result<-mergeTree()(distance)(result[[1]],result[[2]])
result<-rbind(result[[2]],result[[1]])
return(result)
}
}
}
result3<-binarySort(threshold=80)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:75000,])
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result3)>500)
splitRecurse<-function(threshold)
{
function(distance)
{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
#result<-mergeTree()(distance)(result[[1]],result[[2]])
result<-rbind(result[[1]],result[[2]])
return(result)
}
}
}
splitRecurse<-function(threshold)
{
function(distance)
{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
#result<-mergeTree()(distance)(result[[1]],result[[2]])
#result<-rbind(result[[1]],result[[2]])
return(result)
}
}
}
result3<-binarySort(threshold=80)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:750,])
result3
result3[[1]]
result3[[1]][[1]]
result3[[1]][[1]][[1]]
result3[[1]][[1]][[1]][[1]]
plot(result3[[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result3[[1]][[1]][[1]][[2]][,c('x','y')],type='l')
plot(result3[[1]][[1]][[2]][[1]][,c('x','y')],type='l')
plot(result3[[1]][[2]][[2]][[1]][,c('x','y')],type='l')
plot(result3[[2]][[2]][[2]][[1]][,c('x','y')],type='l')
plot(result3[[2]][[2]][[2]][[2]][,c('x','y')],type='l')
gc()
result4<-binarySort(threshold=600)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:75000,])
gc()
result4<-binarySort(threshold=40)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:75000,])
plot(result4[,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][[1]][[1]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[1]][[1]][[1]][[2]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[1]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[2]][,c('x','y')],type='l')
plot(result4[[2]][[2]][[2]][[2]][[1]][[1]][[2]][[1]][[1]][[2]][[1]][,c('x','y')],type='l')
insertRow(c(1,2,3),'a',1)
insertRow(data.frame(c(1,2,3)),'a',1)
df
data.frame(c(1,2,3))
insertRow(data.frame(c(1,2,3)),'a',1)
insertRow(data.frame(c(1,2,3)),'a',2)
df1<-data.frame(c(1,2,3))
insertRow(df,'a',2)
insertRow(df,'a',1)
insertRow(df1,'a',1)
df1[1:0,]
df1
head(df1,0)
tail(df1,n=-2)
tail(df1,n=-1)
insertRows <- function(existingDF, newDF, r) {
result<-rbind(head(existingDF,n=r-1),newDF,tail(existingDF,-(r-1)))
return(result)
}
insertRows(df1,'a',1)
df1
insertRows(df1,data.frame('a'),1)
insertRows(df1,data.frame('a'),2)
insertRows <- function(existingDF, newDF, r) {
result<-rbind.data.frame(head(existingDF,n=r-1),newDF,tail(existingDF,-(r-1)))
return(result)
}
insertRows(df1,data.frame('a'),2)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows <- function(existingDF, newDF, r) {
names(newDF)<-names(existingDF)
result<-rbind.data.frame(head(existingDF,n=r-1),newDF,tail(existingDF,-(r-1)))
return(result)
}
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),1)
tail(df1)
tail(df1,0)
tail(len(df1)-1)
tail(nrow(df1)-1)
tail(df1,nrow(df1)
)
tail(df1,nrow(df1)-(1-1))
insertRows <- function(existingDF, newDF, r) {
names(newDF)<-names(existingDF)
result<-rbind(head(existingDF,n=r-1),newDF,tail(existingDF,len(existingDF)-(r-1)))
return(result)
}
insertRows(df1,data.frame(c('a','a','a')),1)
library(rowr)
list(1,2,3)
rbind(list(1,2,3),4)
c(list(1,2,3),4)
c(df1,'a')
df1
insertRows <- function(existingDF, newDF, r) {
names(newDF)<-names(existingDF)
result<-rbind(head(existingDF,n=r-1),newDF,tail(existingDF,nrow(existingDF)-(r-1)))
return(result)
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),1)
1:1
df1[-1,]
df1[-7,]
df1[1:7,]
df1[1:7,drop=FALSE]
df1[1:7,,drop=FALSE]
seq(1,0)
seq(1,-1)
john
john[1]<-5
john<-c(1,2,3)
john[5]<-5
john
john[0]
tail(john,n=2)<-5
john[0,]
john[0]
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-1:(sizeA+sizeB)
orders[r:sizeA]<-orders[r:sizeA]+sizeB
orders[sizeA:(sizeA+sizeB)]<-r:(r+sizeB)
return(orders)
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-1:(sizeA+sizeB)
orders[r:sizeA]<-orders[r:sizeA]+sizeB
orders[sizeA:(sizeA+sizeB)]<-r:(r+sizeB)
print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
}
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-1:(sizeA+sizeB)
print(orders)
orders[r:sizeA]<-orders[r:sizeA]+sizeB
print(orders)
orders[sizeA:(sizeA+sizeB)]<-r:(r+sizeB)
print(orders)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-1:(sizeA+sizeB)
print(orders)
orders[r:sizeA]<-orders[r:sizeA]+sizeB
print(orders)
orders[(sizeA+1):(sizeA+sizeB)]<-r:(r+sizeB)
print(orders)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-1:(sizeA+sizeB)
print(orders)
orders[r:sizeA]<-orders[r:sizeA]+sizeB
print(orders)
orders[(sizeA+1):(sizeA+sizeB)]<-r:(r+sizeB-1)
print(orders)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),7)
insertRows(df1,data.frame(c('a','a','a')),9)
4:3
seq_len(df)
seq_len(df1)
seq_len(5)
seq_len(0)
seq_len(0)+1
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-seq_len(sizeA+sizeB)
print(orders)
orders[seq_len(sizeA-r+1)]<-orders[seq_len(sizeA-r+1)]+sizeB
print(orders)
orders[seq_len(sizeB)+sizeA]<-seq_len(sizeB)+r
print(orders)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),9)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
orders<-seq_len(sizeA+sizeB)
print(orders)
orders[seq_len(sizeA-r+1)]<-orders[seq_len(sizeA-r+1)]+sizeB
print(orders)
orders[seq_len(sizeB)+sizeA]<-seq_len(sizeB)+(r-1)
print(orders)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
seq_len(df1)
seq_len(3)
+3
seq_len(3)+3
df1
df2<-cbind(df1,df1)
df2
order(df2
)
order(df2[,1],df2[,1])
order(df2[,1],rev(df2[,1]))
order(c(1,1,1),df2[,1])
order(c(1,2,1),df2[,1])
order(c(1,2,1),rev(df2[,1]))
seq_along(df1)
seq_along(df2)
x <- factor(LETTERS[1:4]); names(x) <- letters[1:4]
x
rep(x, 2)
rep(x, each = 2)
rep.int(x, 2)  # no names
rep_len(x, 10)
x
rep.int(5,5)
order(c('A',0,1))
order(c(0,1))
order(c(0,1,2))
order(c(0,1,2,'D'))
order(c(0,1,2,'A'))
order(c(0,'B',1,2,'A'))
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep_int(r,sizeB))
print(order1)
order2<-c(rep_int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
return(result[order(order1,order2),])
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
df1
insertRows(df1,df1,1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
return(result[order(order1,order2),,drop=FALSE])
#print(as.list(environment()))
}
insertRows(df1,df1,1)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),5)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
return(result[order(order1,order2),,drop=FALSE])
}
