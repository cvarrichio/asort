insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
seq_len(df1)
seq_len(3)
+3
seq_len(3)+3
df1
df2<-cbind(df1,df1)
df2
order(df2
)
order(df2[,1],df2[,1])
order(df2[,1],rev(df2[,1]))
order(c(1,1,1),df2[,1])
order(c(1,2,1),df2[,1])
order(c(1,2,1),rev(df2[,1]))
seq_along(df1)
seq_along(df2)
x <- factor(LETTERS[1:4]); names(x) <- letters[1:4]
x
rep(x, 2)
rep(x, each = 2)
rep.int(x, 2)  # no names
rep_len(x, 10)
x
rep.int(5,5)
order(c('A',0,1))
order(c(0,1))
order(c(0,1,2))
order(c(0,1,2,'D'))
order(c(0,1,2,'A'))
order(c(0,'B',1,2,'A'))
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep_int(r,sizeB))
print(order1)
order2<-c(rep_int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
return(result[order(order1,order2),])
#print(as.list(environment()))
}
insertRows(df1,data.frame(c('a','a','a')),1)
df1
insertRows(df1,df1,1)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
print(order1)
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
print(order2)
return(result[order(order1,order2),,drop=FALSE])
#print(as.list(environment()))
}
insertRows(df1,df1,1)
insertRows(df1,data.frame(c('a','a','a')),1)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),5)
insertRows <- function(existingDF, newDF, r) {
colnames(newDF)<-colnames(existingDF)
result<-rbind(existingDF,newDF)
sizeA<-len(existingDF)
sizeB<-len(newDF)
order1<-c(seq_len(sizeA),rep.int(r,sizeB))
order2<-c(rep.int(sizeB+1,sizeA),seq_len(sizeB))
return(result[order(order1,order2),,drop=FALSE])
}
insert<-function()
{
function(headDistance,tailDistance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-distances()(headDistance)(data,insert)
tailInsertDistances<-distances()(tailDistance)(data,insert)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
#       result[insertIndex,'distances']<-insertDistances[insertIndex]
#       if(isTRUE(insertIndex<length(insertDistances)))
#         result[insertIndex+1,'distances']<-insertDistances[insertIndex+1]
return(result)
}
}
}
df
santa[1,]
head(santa[1,],n=1)
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(tailDistance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
#       result[insertIndex,'distances']<-insertDistances[insertIndex]
#       if(isTRUE(insertIndex<length(insertDistances)))
#         result[insertIndex+1,'distances']<-insertDistances[insertIndex+1]
return(result)
}
}
}
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
#       result[insertIndex,'distances']<-insertDistances[insertIndex]
#       if(isTRUE(insertIndex<length(insertDistances)))
#         result[insertIndex+1,'distances']<-insertDistances[insertIndex+1]
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
library(rowr)
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<length(insertDistances)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex+1]
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<length(tailInsertDistances)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex+1]
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<length(tailInsertDistances)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex]
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
print(as.list(environment()))
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<len(result)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex]
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<len(result)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex]
print(as.list(environment()))
return(result)
}
}
}
result<-insertionSort()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3,])
result<-binarySort(threshold=40)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3000,])
insert<-function()
{
function(distance)
{
function(data,insert)
{
##Get old stances
oldDistances<-c(data[['distances']],0)
headInsertDistances<-c(0,distances()(distance)(data,head(insert,n=1)))
tailInsertDistances<-c(distances()(distance)(data,tail(insert,n=1)),0)
##Determine combined distance increase
combinedDistances<-headInsertDistances+tailInsertDistances
##Determine combined change in distances
deltaDistances<-combinedDistances-oldDistances
##Insert where delta is smallest
insertIndex=which.min(deltaDistances)
result<-insertRows(data,insert,insertIndex)
##Update distances
#       print('Next')
result[insertIndex,'distances']<-headInsertDistances[insertIndex]
if(isTRUE(insertIndex<len(result)))
result[insertIndex+len(insert),'distances']<-tailInsertDistances[insertIndex]
#       print(as.list(environment()))
return(result)
}
}
}
result<-binarySort(threshold=40)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3000,])
result
plot(result[[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][[1]][[1]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][[1]][[2]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][[2]][[2]][,c('x','y')],type='l')
plot(result[[1]][[1]][[1]][[1]][[1]][[2]][[3]][,c('x','y')],type='l')
splitRecurse<-function(threshold)
{
function(distance)
{
function(data)
{
if(len(data)<threshold)
return(insertionSort()(distance)(data))
compare<-rows(data,sample(1:len(data),1))
splitDistances<-distance(data,compare)
splits<-splitDistances>median(splitDistances)
dataList<-split(data,splits)
result<-lapply(dataList,splitRecurse(threshold)(distance))
#result<-mergeTree()(distance)(result[[1]],result[[2]])
result<-rbind(result[[1]],result[[2]])
return(result)
}
}
}
result<-binarySort(threshold=40)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3000,])
plot(result[,c('x','y')],type='l')
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)>500)
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)>200)
which(neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)>300)
insertionSort<-function()
{
function(distance)
{
function(data)
{
##Convert to standard data type
data<-buffer(data,preserveClass=FALSE)
##Add distance column
data$distances<-0
dataList<-split(data,1:nrow(data))
result<-Reduce(insert()(distance),dataList)
return(result)
}
}
}
result<-binarySort(threshold=40)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:3000,])
plot(result[,c('x','y')],type='l')
resort<-function(condition)
{
function(distance)
{
function(data)
{
dataList<-splitWhere(condition)(data)
result<-Reduce(insert()(distance),dataList)
return(result)
}
}
}
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))[1,]
neighborDistances<-function()
{
function(distance)
{
function(data)
{
if(len(data)<2)
result<-0
else
result<-rollApply(data,window=2,minimum=2,align='left', fun=function (data) distance(head(data,1),tail(data,1)))
return(buffer(result,length.out=len(data),fill=0))
}
}
}
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))[1,]
neighborDistances<-function()
{
function(distance)
{
function(data)
{
if(len(data)<2)
result<-0
else
result<-rollApply(data,window=2,minimum=1,align='left', fun=function (data) distance(head(data,1),tail(data,1)))
return(buffer(result,length.out=len(data),fill=0))
}
}
}
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))[1,]
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))[1:3,]
neighborDistances<-function()
{
function(distance)
{
function(data)
{
if(len(data)<2)
result<-0
else
result<-rollApply(data,window=2,minimum=1,align='right', fun=function (data) distance(head(data,1),tail(data,1)))
return(buffer(result,length.out=len(data),fill=0))
}
}
}
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))[1:3,]
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))
cbind(result,neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result))
result$distances<-neighborDistances()(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)
result
tail(result,n=1)
result[1,]
tail(result,n=2)
tail(result,n=3)
splitWhere(function (x) x$distance>1000)
splitWhere(function (x) x$distance>1000)(result)
splitWhere(function (x) x$distances>3000)(result)
resort<-function(condition)
{
function(distance)
{
function(data)
{
data$distances<-neighborDistances()(distance)(data)
dataList<-splitWhere(condition)(data)
result<-Reduce(insert()(distance),dataList)
return(result)
}
}
}
resul2<-resort(function (x) x$distance>1000)(function(x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)
result2
resul2
result2<-resul2
rm(resul2)
plot(result2[,c('x','y')],type='l')
result2<-resort(function (x) x$distance>500)(function(x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)
plot(result2[,c('x','y')],type='l')
result<-binarySort(threshold=60)(function (x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(santa[1:40000,])
plot(result[,c('x','y')],type='l')
plot(result2[,c('x','y')])
result2<-resort(function (x) x$distance>1000)(function(x,y) sqrt((x$x-y$x)^2+(x$y-y$y)^2))(result)
plot(result2[,c('x','y')])
plot(result2[,c('x','y')],type='l')
plot(result[,c('x','y')],type='l')
df1<-data.frame(a=c(1,2,3),b=c(2,3,4))
insertRows(df1,data.frame(c('a','a','a')),5)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),1)
df1
insertRows(df1,data.frame(c('a','a'),5))
